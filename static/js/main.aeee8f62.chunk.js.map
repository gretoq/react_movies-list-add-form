{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/constants/constanats.ts","components/helpers/helpers.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","urlPattern","TextField","url","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","isUrlInput","includes","isValid","test","isTitle","isTitleValid","Boolean","trim","length","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isAllRequiredFieldsFilled","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aeee8f62.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        <p className=\"description\">\n          {movie.description}\n        </p>\n\n        <a className=\"link\" href={movie.imdbUrl}>Go to IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// eslint-disable-next-line max-len\nexport const urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { urlPattern } from '../constants';\n\nexport function getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const validateUrl = (url: string) => urlPattern.test(url);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport './TextField.scss';\n\nimport { getRandomDigits, validateUrl } from '../helpers';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const isUrlInput = ['imgUrl', 'imdbUrl'].includes(name);\n  const isValid = isUrlInput\n    ? validateUrl(value)\n    : false;\n\n  const isTitle = name === 'title';\n  const isTitleValid = Boolean(value.trim().length);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {touched && !isValid && isUrlInput && (\n        <p className=\"help is-danger\">\n          Invalid URL\n        </p>\n      )}\n\n      {touched && !isTitleValid && isTitle && (\n        <p className=\"help is-danger\">\n          Invalid title name\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Movie } from '../../types/Movie';\n\nimport { TextField } from '../TextField';\n\ninterface Props {\n  onAdd: (movie: Movie) => void,\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const isAllRequiredFieldsFilled = title.trim() && imgUrl && imdbUrl && imdbId;\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!isAllRequiredFieldsFilled) {\n      return;\n    }\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAllRequiredFieldsFilled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\n\nimport { Movie } from './types/Movie';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies((prevMovies) => ([\n      ...prevMovies,\n      movie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}